---
- name: set namespace
  set_fact:
    _namespace: "{{ namespace_prefix }}{{ user_num }}"
- name: Create Camel K operator
  k8s:
    state: present
    namespace: "{{ _namespace }}"
    definition: "{{ lookup('file', role_path ~ '/files/camelk/operator.yml' ) | from_yaml }}"

- name: Wait until csv/{{ _crw_csv_version }} is Succeeded
  command: >
    oc get csv/{{ _crw_csv_version }} -o jsonpath='{.status.phase}' -n "{{ _namespace }}"
  register: crwcsv
  retries: "{{ _retry }}"
  delay: "{{ _delay }}"
  until: crwcsv.stdout == "Succeeded"

- name: Check if Che cluster already exists (note; error can be ignored)
  command: >
    oc get CheCluster/codeready-workspaces -o jsonpath='{.metadata.name}' -n "{{ _namespace }}"
  register: che_cluster
  ignore_errors: true

- name: Create Che Cluster
  k8s:
    state: present
    namespace: "{{ _namespace }}"
    definition: "{{ lookup('template', role_path ~ '/files/codeready-workspaces/cluster.yml' ) | from_yaml }}"
  when: che_cluster.stdout != "codeready-workspaces"

- name: Wait until Che Cluster is Running
  command: >
    oc get CheCluster/codeready-workspaces -o jsonpath='{.status.cheClusterRunning}' -n "{{ _namespace }}"
  register: checluster
  retries: "{{ _retry }}"
  delay: "{{ _delay }}"
  until: checluster.stdout == "Available"

- name: Get codeready route host
  command: >
    oc get route/codeready -o jsonpath='{.spec.host}' -n "{{ _namespace }}"
  register: che_route
  retries: "{{ _retry }}"
  delay: "{{ _delay }}"
  until: che_route.stdout != ""

- name: Get keycloak route host
  command: >
    oc get route/keycloak -o jsonpath='{.spec.host}' -n "{{ _namespace }}"
  register: keycloak_route
  retries: "{{ _retry }}"
  delay: "{{ _delay }}"
  until: keycloak_route.stdout != ""

